<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="static/common.css">
    <script src="/socket.io/socket.io.js"></script>
    <script src="/static/js/common.js"></script>
    <title>Document</title>
</head>
<body>

    <div class="channels" style="display: ;">
        <div class="nav">
            <span>채널 - <%=user_name%></span>
        </div>
        <div class="user_list" id="user_list"></div>
        <ul class="channel_list" id="channel_list">
        </ul>
        <input type="text" id="title">
        <button id="make_channel">만들기</button>
    </div>

    <div class="chat" style="display: none;">
        <div class="nav">
            <div class="header">
                <div class="title" id="channel_title">테스트 채널</div>
                <div class="list" id="golist">나가기</div>
            </div>
            <div class="member">참여자 : <span id="join_list"></span></div>
        </div>
        <ul class="contents">
        </ul>
        <div class="writer">
            <textarea id="write_msg" rows="3" placeholder="입력해 주세요."></textarea>
            <button type="button" class="write">전송</button>
        </div>
    </div>
<script>
    const chat = io('http://localhost:3000/chat');
    let channel;
    let author = '<%=user_name%>';
    let idx = <%=user_idx%>;

    // /chat
    chat.emit('ready');
    chat.on('reload', function(data) {
        self.location.reload();
    })
    chat.on('redirect', function(data) {
        if(data) alert(data);
        self.location.href = '/';
    });
    chat.on('user_list', function(data) {
        document.querySelector('#user_list').innerHTML = data.map((v) => v.user_name + ' - ' + v.channel).join("<br>");
    });
    chat.on('channel_list', function(data) {
        document.querySelector('#channel_list').innerHTML = data.map((v, k) => HtmlChannel(v, k)).join('');
        document.querySelectorAll('.channel').forEach(function(item) {
            item.addEventListener('click', function() {
                chat.emit('channel_join', { channel: this.dataset.channel });
            });
        });
    });
    // /chat/channel
    chat.on('join_list', function(data) {
        document.querySelector('#join_list').innerText = data.map((v, k) => v.user_name).join(", ");
    });
    // 채널 참여
    chat.on('join', function(data) {
        let title = data.title;
        channel = data.channel;
        document.querySelector('#channel_title').innerText = title;
        document.querySelector('.contents').innerHTML = '';
        document.querySelector('.channels').style.display = 'none';
        document.querySelector('.chat').style.display = 'block';
    });
    // 노티
    chat.on('notice', function(data) {
        console.log(data);
        if(data.idx && data.idx !== idx) return false;
        HtmlNotice(data.msg);
    });
    // 채팅 수신 메시지
    chat.on('chat', function(data) {
        let code = data.idx === idx ? 'me' : 'another';
        HtmlMessage(code, data);
    });

    function HtmlChannel(v, k) {
        return `
        <li class="channel" data-channel="${v.channel_code}">
            <span class="title">${v.channel_title} ( ${v.channel_user_count } )</span>
            <span class="created_at">${v.channel_created_at}</span>
        </li>`;
    }
    function HtmlNotice(data) {
        console.log('notice');
        console.log(data);
        document.querySelector('.contents').insertAdjacentHTML('beforeend', `
        <li class="alert">
            <span>${data}</span>
        </li>`);
        document.body.scrollIntoView(false);
    }
    function HtmlMessage(code, data) {
        if(code === 'me') {
            document.querySelector('.contents').insertAdjacentHTML('beforeend', `
            <li class="${code}">
                <span class="time">${data.time}</span>
                <span class="message">${data.msg}</span>
            </li>`);
        } else {
            document.querySelector('.contents').insertAdjacentHTML('beforeend', `
            <li class="${code}">
                <div class="name">${data.author}</div>
                <span class="message">${data.msg}</span>
                <span class="time">${data.time}</span>
            </li>`);
        }
        document.body.scrollIntoView(false);
    }

    // 방 만들기 > 방장 채팅 참여
    document.querySelector('#make_channel').addEventListener('click', function() {
        chat.emit('channel', { title: document.querySelector('#title').value });
    });
    // 방 나가기
    document.querySelector('#golist').addEventListener('click', function() {
        chat.emit('leave');
        document.querySelector('.contents').innerHTML = '';
        document.querySelector('.channels').style.display = 'block';
        document.querySelector('.chat').style.display = 'none';
    });
    // 글쓰기
    document.querySelector('.write').addEventListener('click', function() {
        let write = document.querySelector('#write_msg');
        if(write.value) {
            chat.emit('chat', { msg: write.value, channel: channel });
            write.value = '';
        }
    });
    // Enter 처리
    window.addEventListener('keydown', function(e) {
        if(e.keyCode === 13 && e.shiftKey === false) {
            document.querySelector('.write').click();
            e.preventDefault();
        }
    });

    // 주기적으로 로그인 상태 체크하기 - 10초
    setInterval(function() {
        ax_post('/state', {}, function(res) {
            if(!res.success) {
                chat.emit('leave');
                self.location.href = '/';
                document.querySelector('.contents').innerHTML = '';
            }
        });
    }, 10000);
</script>
</body>
</html>
